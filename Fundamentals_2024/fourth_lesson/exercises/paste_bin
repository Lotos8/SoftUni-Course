def smallest(list_with_numbers: list) -> int:
    return min(list_with_numbers)


first_number = int(input())
second_number = int(input())
third_number = int(input())
smallest_number = smallest([first_number, second_number, third_number])
print(smallest_number)



#2
def sum_numbers(first_num: int, second_num: int) -> int:
    return first_num + second_num


def subtract(result:int, third_num:int) -> int:
    return result - third_num


def add_and_subtract(first: int, second: int, third: int) -> int:
    sum_result = sum_numbers(first, second)
    final_result = subtract(sum_result, third)
    return final_result


first_number = int(input())
second_number = int(input())
third_number = int(input())
print(add_and_subtract(first_number, second_number, third_number))



#3

def characters_between(first, second):
    all_characters = []
    for current_character in range(ord(first) + 1, ord(second)):
        all_characters.append(chr(current_character))
    return all_characters


first_character = input()
second_character = input()
result = characters_between(first_character, second_character)
print(" ".join(result))


#4

def odd_even_sums(number: str) -> str:
    sum_of_odd_digits = 0
    sum_of_even_digits = 0
    for digit in number:
        if int(digit) % 2 == 0:
            sum_of_even_digits += int(digit)
        else:  # int(digit) % 2 != 0 -> digit is odd
            sum_of_odd_digits += int(digit)
    return f"Odd sum = {sum_of_odd_digits}, Even sum = {sum_of_even_digits}"


some_number = input()
print(odd_even_sums(some_number))


#5.1
numbers_as_string = input().split()
numbers_as_integers = []
for number in numbers_as_string:
    numbers_as_integers.append(int(number))
is_even = lambda x: x % 2 == 0
final_list = list(filter(is_even, numbers_as_integers))
print(final_list)


#5.2
def is_even(number):
    return number % 2 == 0


numbers_as_string = input().split()
numbers_as_integers = []
for number in numbers_as_string:
    numbers_as_integers.append(int(number))
final_list = []
for current_number in numbers_as_integers:
    if is_even(current_number):  # if is_even(current_number) == True
        final_list.append(current_number)
print(final_list)


# 5.3
print([int(number) for number in input().split() if int(number) % 2 == 0])



#8

def is_palindrome(number: str) -> bool:
    return number == number[::-1]


numbers_as_string = input().split(", ")
for current_number in numbers_as_string:
    print(is_palindrome(current_number))


#9
def password_validator(some_password: str) -> list:
    list_with_error_messages = []
    if len(some_password) < 6 or len(some_password) > 10:
        list_with_error_messages.append("Password must be between 6 and 10 characters")
    if not some_password.isalnum():
        list_with_error_messages.append("Password must consist only of letters and digits")
    digits_found = 0
    for current_character in some_password:
        if current_character.isdigit():
            digits_found += 1
    if digits_found < 2:
        list_with_error_messages.append("Password must have at least 2 digits")
    return list_with_error_messages


password = input()
error_messages = password_validator(password)
if not error_messages:  # if len(error_messages) == 0
    print("Password is valid")
else:  # if len(error_messages) > 0
    print("\n".join(error_messages))



#10

def is_perfect(some_number: int) -> str:
    divisors_sum = 0
    for divisor in range(1, some_number):
        if some_number % divisor == 0:
            divisors_sum += divisor
    if some_number == divisors_sum:
        return "We have a perfect number!"
    return "It's not so perfect."


number = int(input())
print(is_perfect(number))


#11

def loading_bar(progress_number: int) -> str:
    if progress_number == 100:
        return "100% Complete!\n[%%%%%%%%%%]"
    loaded_percents_as_digit = progress_number // 10  # symbol %
    not_loaded_percents_as_digit = 10 - loaded_percents_as_digit  # symbol ,
    return f"{progress_number}% [{'%' * loaded_percents_as_digit}{'.' * not_loaded_percents_as_digit}]\nStill loading..."


number = int(input())
print(loading_bar(number))


#12

def calculate_factorial(some_number: int) -> int:
    for multiplier in range(1, some_number):
        some_number *= multiplier
    return some_number


first_number = int(input())
second_number = int(input())
first_factorial = calculate_factorial(first_number)
second_factorial = calculate_factorial(second_number)
result = first_factorial / second_factorial
print(f"{result:.2f}")
