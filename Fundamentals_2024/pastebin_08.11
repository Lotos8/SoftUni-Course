#1

def length_is_valid(name: str) -> bool:
    if 3 <= len(name) <= 16:
        return True
    return False


def characters_are_valid(name: str) -> bool:
    for character in name:
        if not (character.isalnum() or character == "-" or character == "_"):
            return False
    return True


def no_redundant_symbols(name: str) -> bool:
    if " " in name:
        return False
    return True


def username_is_valid(name: str) -> bool:
    if length_is_valid(name) and \
            characters_are_valid(name) and \
            no_redundant_symbols(name):
        return True
    return False


usernames = input().split(", ")
for username in usernames:
    if username_is_valid(username):
        print(username)


#2

first_string, second_string = input().split()
total_sum = 0
if len(first_string) > len(second_string):
    for index in range(len(second_string)):
        total_sum += ord(first_string[index]) * ord(second_string[index])
    for index in range(len(second_string), len(first_string)):
        total_sum += ord(first_string[index])

elif len(second_string) > len(first_string):
    for index in range(len(first_string)):
        total_sum += ord(first_string[index]) * ord(second_string[index])
    for index in range(len(first_string), len(second_string)):
        total_sum += ord(second_string[index])

else:  # len(second_string) == len(first_string)
    for index in range(len(first_string)):
        total_sum += ord(first_string[index]) * ord(second_string[index])
print(total_sum)



#3
import re
file_path = input().split("\\")
filename_and_extension = file_path[-1]
filename, extension = filename_and_extension.split(".")
print(f"File name: {filename}")
print(f"File extension: {extension}")


#4
some_string = input()
encrypted_string = ""
for character in some_string:
    encrypted_character = chr(ord(character) + 3)
    encrypted_string += encrypted_character
print(encrypted_string)


#5

some_string = input()
for index in range(len(some_string)):
    if some_string[index] == ":":
        print(f":{some_string[index+1]}")


#5.1
some_string = input()
for index in range(len(some_string)):
    if some_string[index] == ":":
        if index + 1 in range(len(some_string)):
            print(f":{some_string[index+1]}")

#6

some_string = input()
final_string = ""
last_added_character = ""
for character in some_string:
    if character != last_added_character:
        final_string += character
        last_added_character = character
print(final_string)

#7
some_string = input()
final_string = ""
strength = 0
for index in range(len(some_string)):
    # We have explosion
    if strength > 0 and some_string[index] != ">":
        strength -= 1
    # We have explosion symbol '>'
    elif some_string[index] == ">":
        final_string += some_string[index]  # final_string += ">"
        strength += int(some_string[index + 1])
    # We have no explosion, no explosion mark '>'
    else:
        final_string += some_string[index]
print(final_string)



#8

strings = input().split()
total_sum = 0
for current_string in strings:
    first_letter = current_string[0]
    last_letter = current_string[-1]
    current_number = int(current_string[1: len(current_string)-1])
    if first_letter.isupper():
        first_letter_position = ord(first_letter) - 64
        total_sum += current_number / first_letter_position
    elif first_letter.islower():
        first_letter_position = ord(first_letter) - 96
        total_sum += current_number * first_letter_position
    if last_letter.isupper():
        last_letter_position = ord(last_letter) - 64
        total_sum -= last_letter_position
    elif last_letter.islower():
        last_letter_position = ord(last_letter) - 96
        total_sum += last_letter_position
print(f"{total_sum:.2f}")


#9

some_string = input()
rage_message = ""
sub_string = ""
repetitions = ""
for index in range(len(some_string)):

    if not some_string[index].isdigit():  # non numeric symbol
        sub_string += some_string[index].upper()

    else:  # We have a number which is number of repetitions
        for next_digits in range(index, len(some_string)):
            if not some_string[next_digits].isdigit():
                break
            repetitions += some_string[next_digits]
        rage_message += sub_string * int(repetitions)
        sub_string = ""
        repetitions = ""
print(f"Unique symbols used: {len(set(rage_message))}")
print(rage_message)

#10


def checking_ticket(ticket: str) -> str:
    if len(ticket) != 20:
        return "invalid ticket"
    winning_symbols = ('@', '#', '$', '^')
    left_part = ticket[:10]
    right_part = ticket[10:]
    for current_winning_symbol in winning_symbols:
        for uninterrupted_match_length in range(10, 5, -1):
            winning_symbol_repetition = current_winning_symbol * uninterrupted_match_length
            # We have a winning ticket
            if winning_symbol_repetition in left_part and\
                    winning_symbol_repetition in right_part:
                # We have a Jackpot
                if uninterrupted_match_length == 10:
                    return f'ticket "{ticket}" - {uninterrupted_match_length}{current_winning_symbol} Jackpot!'
                # We have winning ticket but not Jackpot
                return f'ticket "{ticket}" - {uninterrupted_match_length}{current_winning_symbol}'
    return f'ticket "{ticket}" - no match'


tickets = [ticket.strip() for ticket in input().split(", ")]
for current_ticket in tickets:
    print(checking_ticket(current_ticket))